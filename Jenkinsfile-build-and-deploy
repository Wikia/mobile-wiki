def deployenv = 'artifactory.wikia-inc.com/platform/alpine:3.6-curl'
def kubectl = 'artifactory.wikia-inc.com/ops/k8s-deployer:0.0.12'

node('docker-daemon') {
    def namespace = params.namespace
    def cluster = params.cluster ?: "prod"
    def context = "kube-${params.datacenter}-${cluster}"
    def normalizedEnv = params.environment ==~ /sandbox-/ ? "sandbox" : params.environment
    def imageVersion = params.version
    def imageExists = false
    def imageName = ""

    stage('Clone sources') {
        checkout scm

        println "imageName: ${imageName}"

        if (params.crowdin_branch != null) {
            def timestamp = System.currentTimeMillis()
            imageVersion = "${imageVersion}-${timestamp}"
        }

        imageName = "artifactory.wikia-inc.com/mobile-wiki:${imageVersion}"
    }

    withDockerContainer(deployenv){
       stage('Check if image already exists') {
           println "Using version ${imageVersion}"

           def status = sh (script: "curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} -w \"%{http_code}\" -s -I -o /dev/null -XGET \"https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/mobile-wiki/${imageVersion}\"", returnStdout: true).trim()

           if ( status == "200" ){
               println "Image ${imageName} already exists"
               imageExists = true
           }
       }
    }


    stage('Build and push image') {
       if ( !imageExists ) {
            if ( normalizedEnv == "preview" || normalizedEnv == "verify" ) {
                sh """#!/bin/sh
                ./tasks/docker-build.sh ${imageName} ${imageVersion}"""

            } else {
                if (params.crowdin_branch != null) {
                    sh """#!/bin/sh
                    ./tasks/download-translations.sh /etc/crowdin/crowdin.conf ${params.crowdin_branch}"""
                }

                sh """#!/bin/sh
                ./tasks/docker-build.sh ${imageName} ${imageVersion}"""


                def vault_secrets = [
                    [$class: 'VaultSecret', path: 'secret/chef/s3/sjc/prod', secretValues: [
                            [$class: 'VaultSecretValue', envVar: 'SJC_ACCESS_KEY', vaultKey: 'access_key'],
                            [$class: 'VaultSecretValue', envVar: 'SJC_SECRET_KEY', vaultKey: 'secret_key']
                        ]
                    ],
                    [$class: 'VaultSecret', path: 'secret/chef/s3/res/prod', secretValues: [
                            [$class: 'VaultSecretValue', envVar: 'RES_ACCESS_KEY', vaultKey: 'access_key'],
                            [$class: 'VaultSecretValue', envVar: 'RES_SECRET_KEY', vaultKey: 'secret_key']
                        ]
                    ]
                ]
                wrap([$class: 'VaultBuildWrapper', vaultSecrets: vault_secrets]) {
                    sh """#!/bin/sh
                        ./tasks/upload-assets.sh ${imageName} \$SJC_ACCESS_KEY \$SJC_SECRET_KEY \$RES_ACCESS_KEY \$RES_SECRET_KEY"""
                }

            }
        }
    }

    withDockerContainer(deployenv) {
        stage('Create k8s descriptor') {
            sh """#!/bin/sh
            ./tasks/k8s-descriptor.sh ${params.environment} ${imageName} ${params.datacenter}"""
        }
    }

    withDockerContainer(kubectl) {
        stage('Apply k8s descriptor') {
            println "Push to k8s"

            sh """#!/bin/sh
            kubectl --namespace=${namespace} \
                    --context=${context} \
                     --kubeconfig=/config/.kube/config \
                     apply -f k8s/k8s-descriptor-${normalizedEnv}.yaml"""
        }
    }
}
