podTemplate(cloud: 'k8s-sjc-prod', label: 'mobile-wiki', containers: [
    containerTemplate(name: 'deployenv', label: 'pandora', image: 'artifactory.wikia-inc.com/platform/alpine:3.6-curl', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'kubectl', label: 'mobile-wiki', image: 'artifactory.wikia-inc.com/ops/k8s-deployer:0.0.9-jenkins', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker:17.09.0-git', ttyEnabled: true)
    ],
    volumes: [
        hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock")
    ]){
        node('mobile-wiki'){
            def namespace = params.namespace
            def context = "kube-${params.datacenter}-${namespace}"
            def normalizedEnv = params.environment ==~ /sandbox-/ ? "sandbox" : params.environment
            def imageVersion = params.version
            def imageExists = false
            def imageName = "artifactory.wikia-inc.com/mobile-wiki:${imageVersion}"

            stage('Clone sources'){
                checkout scm

                println "imageName: ${imageName}"
            }

            container('deployenv'){
                stage('Check if image already exists'){
                    def artifactoryUrl = "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/mobile-wiki/${imageVersion}"
                    def status = sh (script: "curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} -w \"%{http_code}\" -s -I -o /dev/null -XGET ${artifactoryUrl}", returnStdout: true).trim()

                    if ( status == "200" ){
                        println "Image ${imageName} already exists"
                        imageExists = true
                    }
                }
            }


            if ( !imageExists ) {
                container('docker'){
                    if (params.environment == "preview" || params.environment == "verify" ) {
                        stage('Build and push image'){
                            sh """#!/bin/sh
                            ./tasks/docker-build.sh ${imageName}"""
                       }
                    } else {
                        stage('Build developement image') {
                            sh """#!/bin/sh
                            ./tasks/docker-dev-build.sh ${imageName}"""
                        }
                   }
                }
            }

            container('deployenv') {
                stage('Create k8s descriptor') {
                    sh """#!/bin/sh
                    ./tasks/k8s-descriptor.sh ${params.environment} ${imageName} ${params.datacenter}"""
                }
            }

            container('kubectl') {
                stage('Apply k8s descriptor') {
                    println "Push to k8s"

                    sh """#!/bin/sh
                    kubectl --namespace {namespace} \
                            --context ${context} \
                             --kubeconfig=/config/.kube/config \
                             apply -f k8s/k8s-descriptor-${normalizedEnv}.yaml"""
                }
            }
        }
    }