FROM node:10.16.2-alpine AS build

WORKDIR /app

# passes IMAGE_VERSION build-arg to environment variable to use it in application
ARG IMAGE_VERSION
ENV IMAGE_VERSION ${IMAGE_VERSION}

ARG GITHUB_TOKEN

# move files to cache installing of dependencies
COPY .npmrc .
COPY package-lock.json .
COPY package.json .

# install missing stuff
RUN apk add --no-cache --virtual .gyp python make g++ git && \

# override github's auth type
    git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf ssh://git@github.com/ && \

# install npm globals
    # we are running npm install as root so we need to set unsafe-perm
    # in order to execute all npm postinstall scripts properly
    npm set unsafe-perm=true && \
    npm set progress=false && \
    npm install -g ember-cli && \

# install all dependencies
    npm run setup && \

# cleanup
    apk del .gyp python make g++ git && \
    npm cache clean --force

# copy app
# Note:
# - first argument is the path inside the context of build (folder where Dockerfile is placed)
# - second argument is the docker daemon (newly created container)
# - "." means "current working directory", and since we're not selecting any specific files
# it's basically "copy everything from mobile-wiki project to WORKDIR in docker"
COPY . .

# build app
RUN npm run build

FROM node:8.16.0-alpine
WORKDIR /app

# create group and user
RUN addgroup -S mobile-wiki && \
    adduser -h /app -s /sbin/nologin -D -G mobile-wiki -u 1337 docker_user && \
    chmod 755 /app

USER docker_user

COPY --from=build /app /app

# 7001 is for debugging
EXPOSE 7001

# run fastboot-server when 'docker run' will be called
ENTRYPOINT ["npm", "run", "fastboot-server"]
